<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[PHP新的垃圾回收机制]]></title>
    <url>%2F2018%2F03%2F07%2FPHP%E6%96%B0%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[介绍在阅读本篇博文之前，建议先了解一下: PHP内核之ZVALPHP是一门托管型语言，所以在写PHP代码时无需手动处理内存的分配和释放，也就是说PHP自身实现了垃圾自动回收(GC).在PHP官方你可以看到关于GC的介绍: 传送 PHP5.2中的垃圾回收算法 在php5.3之前，PHP使用的内存回收算法是大名鼎鼎的Reference counting(引用计数) Reference counting 的实现原理为每个内存对象分配一个计数器，当一个内存对象建立时计数器初始化为 1(因为此时一定有一个变量引用了该对象)。以后每有一个新变量引用此内存对象（如赋值操作 $a = $b），计数器加 1，而每当减少一个引用此内存对象的变量（如 unset($a)），计数器减 1。当垃圾回收机制运作的时候，将所有计数器为 0 的内存对象销毁并回收其占用的内存。 在PHP5.2中内存对象就是zval, 计数器就是 zval 的 refcount (PHP5.3之后改成 refcount__gc)， 使用 xdebug 拓展的xdebug_debug_zval() 方法可以看到 refcount 值。 123456$a = &apos;hello world&apos;;xdebug_debug_zval(&apos;a&apos;);$b = $a;xdebug_debug_zval(&apos;a&apos;);unset($b);xdebug_debug_zval(&apos;a&apos;); 输出结果 123a: (refcount=1, is_ref=0)=&apos;hello world&apos;a: (refcount=2, is_ref=0)=&apos;hello world&apos;b: (refcount=1, is_ref=0)=&apos;hello world&apos; 由上而的输出结果到知，当把$a赋值给$b时，refcount 会加 1, 因为两个变量都指向同一个zval, 而不是新增一个zval, 也就是cow(写时复制)。 当对$b使用unset()时，refcount 会减 1, 因为现在只有$a指向这个zval。 Reference counting (引用计数) 非常的简单，但也有一个致命问题，那就是环状引用时会造成内存泄露。 如下是一个典型例子: 123$a = array( &apos;one&apos; );$a[] = &amp;$a;xdebug_debug_zval( &apos;a&apos; ); 输出结果: 1234a: (refcount=2, is_ref=1)=array ( 0 =&gt; (refcount=1, is_ref=0)=&apos;one&apos;, 1 =&gt; (refcount=2, is_ref=1)=...) 图示: 上面的 … 是发生了递归调用, a 的变量容器中 refcount 的值由于有两次引用的存在所以为 2。 此时对 $a 调用 unset()，将从符号表中删除这个符号，同时 refcount 值也减 1。 1234(refcount=1, is_ref=1)=array ( 0 =&gt; (refcount=1, is_ref=0)=&apos;one&apos;, 1 =&gt; (refcount=1, is_ref=1)=...) 图示： 因为 refcount = 1 不等于 0，所以它不会被当作垃圾回收。但同时在符号表中找不到哪个符号指向这个 zval，导致也没有办法手动清除。最终的导致在这个脚本结束之前，这个zval结构体会一直占用着内存，导致内存泄漏。 由于 Reference Counting 的这个缺陷，PHP5.3 改进了垃圾回收算法。 PHP5.3中的垃圾回收算法PHP5.3 的垃圾回收算法是在引用计数的基础上，添加了一种同步回收算法，这个算法由IBM的工程师在论文Concurrent Cycle Collection in Reference Counted Systems 中提出。 具体实现原理: 首先 PHP 会分配一个固定大小的“根缓冲区”，这个缓冲区用于存放固定数量的 zval（默认是10,000），如果需要修改则需要修改源代码 Zend/zend_gc.c 中的常量 GC_ROOT_BUFFER_MAX_ENTRIES 然后重新编译。 这个根缓冲区中存放的是 可能根（possible roots)，就是可能发生内存泄露的 zval。当根缓冲区满了的时候（或者手动调用 gc_collect_cycle() 函数时），PHP 就会执行垃圾回收。 步骤 A 为避免不得不检查所有引用计数可能减少的垃圾周期，这个算法把所有可能根(possible roots 都是zval变量容器),放在根缓冲区(root buffer)中(用紫色来标记，称为疑似垃圾)，这样可以同时确保每个可能的垃圾根(possible garbage root)在缓冲区中只出现一次。仅仅在根缓冲区满了时，才对缓冲区内部所有不同的变量容器执行垃圾回收操作。 步骤 B 模拟删除每个紫色变量。模拟删除时可能将不是紫色的普通变量引用数减”1”，如果某个普通变量引用计数变成0了，就对这个普通变量再做一次模拟删除。每个变量只能被模拟删除一次，模拟删除后标记为灰。 步骤 C 模拟恢复每个紫色变量。恢复是有条件的，当变量的引用计数大于0时才对其做模拟恢复。同样每个变量只能恢复一次，恢复后标记为黑，基本就是步骤 B 的逆运算。这样剩下的一堆没能恢复的就是该删除的蓝色节点了， 步骤 D 清空根缓冲区中的所有根，然后销毁所有 refcount 为 0 的 zval，并收回其内存，这才是真实删除的过程。 总结 并不是每次 refcount 减少时都进入回收周期，只有根缓冲区满额后在开始垃圾回收。 解决了循环引用导致的内存泄露问题。 整体上可以总将内存泄露保持在一个阈值以下（与缓冲区的大小有关)。 新的垃圾回收机制总结 如果发现一个zval容器中的refcount在增加，说明不是垃圾 如果发现一个zval容器中的refcount在减少，如果减到了0，直接当做垃圾回收 如果发现一个zval容器中的refcount在减少，并没有减到0，PHP会把该值放到缓冲区，当做有可能是垃圾的怀疑对象 当缓冲区满时，PHP会自动调用一个方法取遍历每一个值，如果发现是垃圾就清理。]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Zend</tag>
        <tag>GC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入理解PHP内核之ZVAL]]></title>
    <url>%2F2018%2F03%2F06%2F%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%86%85%E6%A0%B8%E4%B9%8BZVAL%2F</url>
    <content type="text"><![CDATA[PHP是一种弱类型语言，但是弱类型并不代表PHP变量就没有类型区分 PHP的类型有8种 标量类型：boolen(布尔)，integer(整型)，float(浮点)，string(字符) 复合类型：array(数组)，object(对象) 特殊类型：resource(资源) null PHP可以不声明变量类型，可以在运行时直接赋值。并且在运行期间可以由一种类型转换成另一种类型。 如下例，没有声明的情况下，$variable 可以赋任意类型的值。123$variable = 0;$variable = &apos;hello world.&apos;;$variable = true; 在PHP引擎内，变量都是用一个结构体来表示。 这个结构体具体代码在: 点击传送 ZVAL 基本结构为: 1234567struct _zval_struct &#123; /* Variable information */ zvalue_value value; /* 存储变量的值 */ zend_uint refcount__gc; /* 引用计数 */ zend_uchar type; /* 变量的类型 */ zend_uchar is_ref__gc; /* 是否为引用 */&#125;; zval_value value这里就是变量的实际值，类型是一个 zvalue_value 联合体。 1234567891011typedef union _zvalue_value &#123; long lval; /* long value */ double dval; /* double value */ struct &#123; char *val; int len; &#125; str; HashTable *ht; /* hash table value */ zend_object_value obj; zend_ast *ast;&#125; zvalue_value; zend_uint refcount__gc实际是一个计数器，用来保存有多少变量指向该zval。在变量生成时，会置为1，也就是说 refcount__gc = 1 对变量进行操作会改变它的值。如 $a = $b 会使 refcount 加 1，而 unset() 操作会减 1 zend_uchar type 这个字段表示变量的类型，前面说过 PHP 有8种类型，在 PHP zend 引擎中，对应下面的宏 该type字段会决定上面 zval_value 联合体储存的方式 1234567891011#define IS_NULL 0#define IS_LONG 1#define IS_DOUBLE 2#define IS_BOOL 3#define IS_ARRAY 4#define IS_OBJECT 5#define IS_STRING 6#define IS_RESOURCE 7#define IS_CONSTANT 8#define IS_CONSTANT_AST 9#define IS_CALLABLE 10 zend_uchar is_ref__gc标志是否为引用,当使用 &amp; 对一个变量操作时,如 $a = &amp;$b, is_ref__gc 会被设置为1。 zval如何在PHP中运行我们在创建一个PHP变量时实际上在PHP中是创建了一个zval123// 下面代码需要安装 xdebug 扩展$a = &apos;hello world&apos;;xdebug_debug_zval(&apos;a&apos;); 输出结果1a: (refcount=1, is_ref=0)=&apos;hello world&apos; 对应上面的zval结构体，也就是1234value = &apos;hello world&apos;;refcount__gc = 1;type = IS_STRING;is_ref__gc = 0; 我们把$a赋值给另一个变量时，会增加zval的refcount__gc12345$a = &apos;hello world&apos;;xdebug_debug_zval(&apos;a&apos;);$b = $a;xdebug_debug_zval(&apos;a&apos;);xdebug_debug_zval(&apos;b&apos;); 输出结果 123a: (refcount=1, is_ref=0)=&apos;hello world&apos;a: (refcount=2, is_ref=0)=&apos;hello world&apos;b: (refcount=2, is_ref=0)=&apos;hello world&apos; 可以看到$a和$b的结构是一样的,它们都指向同一个zval使用unset时12345$a = &apos;hello world&apos;;$b = $a;xdebug_debug_zval(&apos;a&apos;);unset($b);xdebug_debug_zval(&apos;a&apos;); 输入结果12a: (refcount=2, is_ref=0)=&apos;hello world&apos;a: (refcount=1, is_ref=0)=&apos;hello world&apos; 使用 &amp; 时123$a = &apos;hello world&apos;;$b = &amp;$a;xdebug_debug_zval(&apos;a&apos;); 输入结果1a: (refcount=2, is_ref=1)=&apos;hello world&apos; 后记 在 PHP7 中，zval结构体发生了重大变化，有兴趣的可以参考 鸟哥-深入理解PHP7之zval]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Zend</tag>
        <tag>Zval</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三种常见单例模式实现]]></title>
    <url>%2F2018%2F03%2F06%2F%E4%B8%89%E7%A7%8D%E5%B8%B8%E8%A7%81%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[下面列举了三种: 懒汉式 饿汉式 登记式 懒汉式123456789101112131415class Singleton&#123; private static $instance = null; private function __construct() &#123; &#125; private function __clone() &#123;&#125; public static function getInstance() : Singleton &#123; if (self::$instance === null) &#123; self::$instance = new self(); &#125; return self::$instance; &#125; &#125; 饿汉式123456789101112131415/** * php中是不允许这样的，这里只做示例使用 */class Singleton&#123; private static $instance = new Singleton(); private function __construct() &#123; &#125; private function __clone() &#123;&#125; public static function getInstance() : Singleton &#123; return self::$instance; &#125; &#125; 登记式1234567891011121314151617181920/** * php中是不允许的这样的，这里只做示例使用 */class Singleton&#123; private static $instance = null; private function __construct() &#123; &#125; private function __clone() &#123;&#125; private static class Holder &#123; private static final Singleton SINGLETON = new Singleton(); &#125; public static function getInstance() : Singleton &#123; return Holder.SINGLETON; &#125; &#125;]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>单例模式</tag>
        <tag>懒汉式</tag>
        <tag>饿汉式</tag>
        <tag>登记式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6 的 Generator (生成器)]]></title>
    <url>%2F2018%2F03%2F05%2FES6%E7%9A%84Generator%2F</url>
    <content type="text"><![CDATA[Generator 是 ES6 标准中引入的一个新的数据类型。 例子先看看具体怎么使用 1234567891011function* demo(i) &#123; yield i++; yield i++; return i++;&#125;var de = demo(1);de.next(); // &#123;value: 1, done: false&#125;de.next(); // &#123;value: 2, done: false&#125;de.next(); // &#123;value: 3, done: true&#125; 从上面代码可以看出: 1. Generator 和 函数 很像。 2. Generator 定义 function* 比 函数 多出一个 * 号。 3. Generator 调用后返回的结果 (迭代器对象) 需要赋值给一个变量 4. Generator 返回的结果可以多次调用。 其实上面的代码就是定义了一个以 demo 命名的 Generator (生成器)。 调用后会返回一个对象，这个对象我们称它为 迭代器。 每次调用这个返回的 迭代器 的 next 方法后，会执行第一条 yield (委托)。 并在这里暂停 (退出并保留上下文，下次进入时继续向下运行)， 然后返回一个对象，这个对象包含 一个 value (yield 后面的运算结果) 和 一个 done (迭代器是否完成) 根据上面的执行结果可以看出，每调用一次 next，都会执行一次 yield。 当遇到 return 时，返回对象的 done 就变成了 true, 此时就退出了 Generator。 next 方法123456789101112function* demo() &#123; let i = yield &apos;one&apos;; return i;&#125;var de = demo();let obj = de.next(); // &#123;value: &quot;one&quot;, done: false&#125;de.next(&quot;test:&quot; + obj.value); // &#123;value: &quot;test:one&quot;, done: true&#125; next 方法是可以传递参数的，这个参数将作为 上次暂停的 yield 的返回值。 yield*yield 我们知道是怎么一回事了，那 yield* 又是什么？ 1234567891011121314151617function* demo() &#123; yield &apos;one&apos;; yield foo(); yield &apos;four&apos;;&#125;function* foo() &#123; yield &apos;two&apos;; yield &apos;three&apos;;&#125;var de = demo();de.next(); // &#123;value: &quot;one&quot;, done: false&#125;de.next(); // &#123;value: foo, done: false&#125;de.next(); // &#123;value: &quot;four&quot;, done: false&#125;de.next(); // &#123;value: undefined, done: true&#125; 调用一个 demo 生成器，执行完第一条 yield ‘one’ 后 第二条 yield foo() 调用另一个生成器。 结果发现 yield foo() 并没有去调用 foo() 生成器 中的 yield ‘two’ 这是因为 yield 只会返回右边运算的值，而 foo() 返回的是一个 迭代器，所以这里的 value 会是 foo 123// foo() 返回一个 迭代器foo(); // foo &#123;&lt;suspended&gt;&#125; 我们改用 yield* 再试试 123456789101112131415161718function* demo() &#123; yield &apos;one&apos;; yield* foo(); yield &apos;four&apos;;&#125;function* foo() &#123; yield &apos;two&apos;; yield &apos;three&apos;;&#125;var de = demo();de.next(); // &#123;value: &quot;one&quot;, done: false&#125;de.next(); // &#123;value: &quot;two&quot;, done: false&#125;de.next(); // &#123;value: &quot;three&quot;, done: false&#125;de.next(); // &#123;value: &quot;four&quot;, done: false&#125;de.next(); // &#123;value: undefined, done: true&#125; 很多人用 Generator 来处理异步编程，但它的本质是其实是协程，下一次我们再具体说明。 关于如何使用 Generator 来处理异步编程，请看我的另一篇文章： js异步流程控制 未完待续…]]></content>
      <categories>
        <category>Js</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>Js</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Js异步流程控制]]></title>
    <url>%2F2018%2F03%2F05%2Fjs%E5%BC%82%E6%AD%A5%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%2F</url>
    <content type="text"><![CDATA[说明目前 Js 流程控制技术多种多样，而async/await是es7的新标准那像 callback, events, promise，generator，co 又是什么样，为什么更推荐使用async呢？ 回调函数先来看看传统的回调，这也是最简单最容易理解的。 123456789101112131415function sleep(callback) &#123; setTimeout(function() &#123; console.log(&apos;执行到这里了&apos;); callback(&apos;hello world&apos;); &#125;, 1000);&#125;sleep(function(message) &#123; console.log(message);&#125;);// 执行结果：// 执行到这里了// hello world 上面的代码比较容易理解，调用sleep, 把匿名函数作为参数传递出去，当sleep执行完成后调用回调参数 但如果有多层调用就会变成这样： 12345678910111213sleep(function(message) &#123; console.log(message); sleep(function(message) &#123; console.log(message); sleep(function(message) &#123; console.log(message); &#125;); &#125;);&#125;); 这也就是所谓的 “回调地狱（callback hell）”。 很明显，这种写法层级嵌套很深，比较反人类，维护起来相当麻烦，出错了很难以排查， 事件监听任务的执行不取决于代码的顺序，而取决于某个事件是否发生。 下面代码采用 nodejs 的 events 模块，该模块可以实现事件绑定触发 (事件机制其实是一种观察者模式) 12345678910111213141516171819202122232425262728function sleep() &#123; var emitter = new require(&apos;events&apos;)(); emitter.emit(&apos;one&apos;, &apos;回调: 1&apos;); setTimeout(function() &#123; emitter.emit(&apos;two&apos;, &apos;回调: 2&apos;); emitter.emit(&apos;done&apos;, &apos;完成&apos;); &#125;, 1000);&#125;var emit = sleep();emit.on(&apos;one&apos;,function (message) &#123; console.log(message);&#125;);emit.on(&apos;two&apos;,function (message) &#123; console.log(message);&#125;);emit.on(&apos;done&apos;,function (message) &#123; console.log(message);&#125;);// 执行结果：// 回调: 1// 回调: 2// 完成 使用 events 的好处是可以比较方便的添加多个回调，有利于实现模块化 但并没有解决回调嵌套的问题 如果有多层嵌套，需要在emit.on匿名函数里添加，如下： 123456emit.on(&apos;done&apos;, function() &#123; var emit2 = sleep(); emit2.on(&apos;done&apos;,function (message) &#123; console.log(message); &#125;);&#125;); 而且整个程序都要变成事件驱动型，运行流程会变得不清晰。 PromisePromise 对象是 CommonJS 提出的一种规范，目的是为异步编程提供统一接口。 并且 ES6 原生提供了 Promise 对象。 直接上代码: 123456789101112131415161718192021222324var delay = function(ret) &#123; return new Promise(function(resolve, reject) &#123; setTimeout(function() &#123; if (ret) &#123; resolve(&apos;delay 执行完了&apos;); &#125; else &#123; reject(&apos;这是出错信息.&apos;); &#125; &#125;, 1000); &#125;); &#125;;var callback = function(message) &#123; console.log(message);&#125;;var error = function(error) &#123; console.log(error);&#125;;delay(true).then(callback).catch(error); // delay 执行完了delay(false).then(callback).catch(error); // 这是出错信息. 使用 promise 后回调函数变成了链式写法，程序的运行流程可以看得很清楚，而且有一整套的配套方法实现许多强大的功能。 比如： 12345// 实现多个回调delay().then(callback1).then(callback2);// 发生错误时delay().catch(error); 这种写法的缺点是编写和理解比较困难。 Generator Generator(生成器) 是 ES6 的新特性，具体用法请看我的另一篇文章 ES6 的 Generator (生成器) co那么怎么利用 Generator 进行异步流程控制呢？ 先实现一个 co 函数 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950// 先定义一个 sleep 函数，这个函数的作用是返回一个匿名函数function sleep(ms) &#123; return function(callback) &#123; setTimeout(function() &#123; callback(&apos;test&apos;); &#125;, ms); &#125;&#125;// 把一个生成器作为参数传递给 coco(function* ()&#123; var now = Date.now(); var i = yield sleep(100); console.log(Date.now() - now); // 100 (因为执行效率的原因可能会大于100) console.log(i); // test&#125;);function co(func) &#123; // 执行 生成器 得到 迭代器 var gen = func(); //调用下面的 next 方面 next(); function next(arg) &#123; // 执行 迭代器 var ret = gen.next(arg); // 生成器结束直接返回 if (ret.done) &#123; return; &#125; // 执行回调 // 这里的 ret.value 就是上面的 sleep 返回的 匿名函数 if (typeof ret.value == &apos;function&apos;) &#123; ret.value(function() &#123; // 当 异步操作 (这里是上面的setTimeout) 完成后 // 递归调用 next，并携带上参数 next.apply(this, arguments); &#125;); return; &#125; &#125;&#125; 把 Promise、generator 和 co 结合起来 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849function co(gen) &#123; var iterator = gen(); next(); function next(arg) &#123; var ret = iterator.next(arg); if (ret.done) &#123; return; &#125; if (typeof ret.value == &apos;object&apos;) &#123; ret.value.then(next).catch(function(error) &#123; next(iterator.throw(error)); &#125;); &#125; &#125;&#125; var delay = function(ret) &#123; return new Promise(function(resolve, reject) &#123; setTimeout(function() &#123; if (ret) &#123; resolve(&apos;delay 执行完了&apos;); &#125; else &#123; reject(&apos;这是出错信息.&apos;); &#125; &#125;, 1000); &#125;);&#125;;var gen = function* () &#123; try &#123; var one = yield delay(true); console.log(one); var two = yield delay(false); console.log(two); &#125; catch(error) &#123; console.log(&apos;出错了：&apos; + error); &#125;&#125;co(gen)// 执行结果 // delay 执行完了// 出错了：这是出错信息. 上面仅仅是一个简单的 co 实现方式，想体验更加强大的 co，可以去看看下面 TJ 大神开发的 co 模块 co模块 ps: co (coroutine) 即协同程序。 async/awaitasync/await 是es7的新标准，可以说是异步流程控制的终极解决方案，它使用起来非常简单，而且不需要知道底层的运行原理 1234567891011121314151617181920212223242526272829303132333435// 把上面的例子拿过来var gen = function* () &#123; try &#123; var one = yield delay(true); console.log(one); var two = yield delay(false); console.log(two); &#125; catch(error) &#123; console.log(&apos;出错了：&apos; + error); &#125;&#125;co(gen)// 上面的代码，改用 async/await 可以写成这样var test = async function() &#123; try &#123; var one = await delay(true); console.log(one); var two = await delay(false); console.log(two); &#125; catch(error) &#123; console.log(&apos;出错了：&apos; + error); &#125;&#125;test();// 执行结果 // delay 执行完了// 出错了：这是出错信息. 其实经过比较就会发现，async 就是将 Generator 函数的星号（*）换成 async，将 yield 换成 await。 也就是说 async/await 仅仅是 Generator/yield 的一个语法糖罢了。]]></content>
      <categories>
        <category>Js</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>Js</tag>
        <tag>ES7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多版本并发控制的机制与原理]]></title>
    <url>%2F2018%2F03%2F05%2F%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E7%9A%84%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[什么是 MVCC MVCC （Mutli Version Concurreny Control）既 多版本并发控制，也叫 一致性非锁定读，实现原理其它就是使用快照实现写时复制 (Copy On Write) 使用MVCC的好处 消除锁的开销：传统的数据库保证数据一致性是对数据进行加锁操作，但加锁必然会产生开销，使用MVCC能够避免对数据加锁。 提高并发：在保证了数据的ACID的同时，实现了 读读 、读写、写读 的并发。 InnoDB如何实现MVCC MySql InnoDB MVCC主要是为事务的 可重复读 隔离级别服务的，在此隔离级别下，进程间数据相互隔离。 为了实现MVCC，InnoDB引擎会对每一行都加上两个隐藏的字段，一个字段用来存储行被更新的时间戳，另一字段存储行被删除的时间戳 （这里的时间戳都是逻辑时间戳）。事务在开始时，InnoDB引擎会给该事务一个递增的版本号（也就是上面说的逻辑时间戳），在该事务中，InnoDB会把每一条语句的版本号和这条语句遇到的行版本进行比对，然后结合不同的隔离级别，来决定是否返回该行。 MVCC的缺点： 为了实现多版本，InnoDB需要维护额外的隐藏字段，以及清理不需要的行版本，会带来额外开销。 参考MySql技术内幕]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySql</tag>
        <tag>InnoDB</tag>
        <tag>MVCC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次在Docker容器中crontab不执行的问题]]></title>
    <url>%2F2018%2F02%2F17%2F%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9C%A8Docker%E5%AE%B9%E5%99%A8%E4%B8%ADcrontab%E4%B8%8D%E6%89%A7%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[在容器中添加 crontab 并没有生效，这是由于 docker 容器被严格要求只允许使用内核的部分能力导致的，按下面解决方案修改后解决 解决方案1234567// 进入容器$ vim /etc/pam.d/crondaccount required pam_access.soaccount include password-auth#session required pam_loginuid.so #注释此行session include password-authauth include password-auth 建议 不要在单一容器中运行超过一个进程]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>crontab</tag>
      </tags>
  </entry>
</search>
