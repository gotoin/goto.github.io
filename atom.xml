<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Goto&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.i4ww.com/"/>
  <updated>2018-03-07T07:14:36.000Z</updated>
  <id>http://www.i4ww.com/</id>
  
  <author>
    <name>goto</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>三种常见单例模式实现</title>
    <link href="http://www.i4ww.com/2018/03/06/%E4%B8%89%E7%A7%8D%E5%B8%B8%E8%A7%81%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.i4ww.com/2018/03/06/三种常见单例模式实现/</id>
    <published>2018-03-06T14:17:31.000Z</published>
    <updated>2018-03-07T07:14:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下面列举了三种-懒汉式-饿汉式-登记式"><a href="#下面列举了三种-懒汉式-饿汉式-登记式" class="headerlink" title="下面列举了三种: 懒汉式 饿汉式 登记式"></a>下面列举了三种: 懒汉式 饿汉式 登记式</h3><a id="more"></a><h1 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Singleton</span><br><span class="line">&#123;</span><br><span class="line">    private static $instance = null;</span><br><span class="line"></span><br><span class="line">    private function __construct() &#123; &#125;</span><br><span class="line">    private function __clone() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static function getInstance() : Singleton</span><br><span class="line">    &#123;</span><br><span class="line">        if (self::$instance === null) &#123;</span><br><span class="line">            self::$instance = new self();</span><br><span class="line">        &#125;</span><br><span class="line">        return self::$instance;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * php中是不允许这样的，这里只做示例使用</span><br><span class="line">  */</span><br><span class="line">class Singleton</span><br><span class="line">&#123;</span><br><span class="line">    private static $instance = new Singleton();</span><br><span class="line"></span><br><span class="line">    private function __construct() &#123; &#125;</span><br><span class="line">    private function __clone() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static function getInstance() : Singleton</span><br><span class="line">    &#123;</span><br><span class="line">        return self::$instance;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="登记式"><a href="#登记式" class="headerlink" title="登记式"></a>登记式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * php中是不允许的这样的，这里只做示例使用</span><br><span class="line">  */</span><br><span class="line">class Singleton</span><br><span class="line">&#123;</span><br><span class="line">    private static $instance = null;</span><br><span class="line"></span><br><span class="line">    private function __construct() &#123; &#125;</span><br><span class="line">    private function __clone() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    private static class Holder</span><br><span class="line">    &#123;</span><br><span class="line">        private static final Singleton SINGLETON = new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function getInstance() : Singleton</span><br><span class="line">    &#123;</span><br><span class="line">        return Holder.SINGLETON;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;下面列举了三种-懒汉式-饿汉式-登记式&quot;&gt;&lt;a href=&quot;#下面列举了三种-懒汉式-饿汉式-登记式&quot; class=&quot;headerlink&quot; title=&quot;下面列举了三种: 懒汉式 饿汉式 登记式&quot;&gt;&lt;/a&gt;下面列举了三种: 懒汉式 饿汉式 登记式&lt;/h3&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://www.i4ww.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="单例模式 懒汉式 饿汉式 登记式" scheme="http://www.i4ww.com/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-%E6%87%92%E6%B1%89%E5%BC%8F-%E9%A5%BF%E6%B1%89%E5%BC%8F-%E7%99%BB%E8%AE%B0%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>多版本并发控制的机制与原理</title>
    <link href="http://www.i4ww.com/2018/03/05/%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E7%9A%84%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%8E%9F%E7%90%86/"/>
    <id>http://www.i4ww.com/2018/03/05/多版本并发控制的机制与原理/</id>
    <published>2018-03-05T11:21:05.000Z</published>
    <updated>2018-03-07T07:08:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-MVCC"><a href="#什么是-MVCC" class="headerlink" title="什么是 MVCC"></a>什么是 MVCC</h1><ul><li>MVCC （Mutli Version Concurreny Control）既 多版本并发控制，也叫 一致性非锁定读，实现原理其它就是使用快照实现写时复制 (Copy On Write)</li></ul><h1 id="使用MVCC的好处"><a href="#使用MVCC的好处" class="headerlink" title="使用MVCC的好处"></a>使用MVCC的好处</h1><ul><li><p>消除锁的开销：传统的数据库保证数据一致性是对数据进行加锁操作，但加锁必然会产生开销，使用MVCC能够避免对数据加锁。</p></li><li><p>提高并发：在保证了数据的ACID的同时，实现了 读读 、读写、写读 的并发。</p></li></ul><a id="more"></a><h1 id="InnoDB如何实现MVCC"><a href="#InnoDB如何实现MVCC" class="headerlink" title="InnoDB如何实现MVCC"></a>InnoDB如何实现MVCC</h1><ul><li>MySql InnoDB MVCC主要是为事务的 可重复读 隔离级别服务的，在此隔离级别下，进程间数据相互隔离。</li><li>为了实现MVCC，InnoDB引擎会对每一行都加上两个隐藏的字段，一个字段用来存储行被更新的时间戳，另一字段存储行被删除的时间戳 （这里的时间戳都是逻辑时间戳）。事务在开始时，InnoDB引擎会给该事务一个递增的版本号（也就是上面说的逻辑时间戳），在该事务中，InnoDB会把每一条语句的版本号和这条语句遇到的行版本进行比对，然后结合不同的隔离级别，来决定是否返回该行。</li></ul><h1 id="MVCC的缺点："><a href="#MVCC的缺点：" class="headerlink" title="MVCC的缺点："></a>MVCC的缺点：</h1><ul><li>为了实现多版本，InnoDB需要维护额外的隐藏字段，以及清理不需要的行版本，会带来额外开销。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><pre><code>MySql技术内幕</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是-MVCC&quot;&gt;&lt;a href=&quot;#什么是-MVCC&quot; class=&quot;headerlink&quot; title=&quot;什么是 MVCC&quot;&gt;&lt;/a&gt;什么是 MVCC&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;MVCC （Mutli Version Concurreny Control）既 多版本并发控制，也叫 一致性非锁定读，实现原理其它就是使用快照实现写时复制 (Copy On Write)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;使用MVCC的好处&quot;&gt;&lt;a href=&quot;#使用MVCC的好处&quot; class=&quot;headerlink&quot; title=&quot;使用MVCC的好处&quot;&gt;&lt;/a&gt;使用MVCC的好处&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;消除锁的开销：传统的数据库保证数据一致性是对数据进行加锁操作，但加锁必然会产生开销，使用MVCC能够避免对数据加锁。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提高并发：在保证了数据的ACID的同时，实现了 读读 、读写、写读 的并发。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://www.i4ww.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySql InnoDB MVCC" scheme="http://www.i4ww.com/tags/MySql-InnoDB-MVCC/"/>
    
  </entry>
  
  <entry>
    <title>记一次在Docker容器中crontab不执行的问题</title>
    <link href="http://www.i4ww.com/2018/02/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9C%A8Docker%E5%AE%B9%E5%99%A8%E4%B8%ADcrontab%E4%B8%8D%E6%89%A7%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://www.i4ww.com/2018/02/17/记一次在Docker容器中crontab不执行的问题/</id>
    <published>2018-02-17T10:38:20.000Z</published>
    <updated>2018-03-07T07:09:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在容器中添加-crontab-并没有生效，这是由于-docker-容器被严格要求只允许使用内核的部分能力导致的，按下面解决方案修改后解决"><a href="#在容器中添加-crontab-并没有生效，这是由于-docker-容器被严格要求只允许使用内核的部分能力导致的，按下面解决方案修改后解决" class="headerlink" title="在容器中添加 crontab 并没有生效，这是由于 docker 容器被严格要求只允许使用内核的部分能力导致的，按下面解决方案修改后解决"></a>在容器中添加 crontab 并没有生效，这是由于 docker 容器被严格要求只允许使用内核的部分能力导致的，按下面解决方案修改后解决</h3><a id="more"></a><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 进入容器</span><br><span class="line">$ vim /etc/pam.d/crond</span><br><span class="line">account    required   pam_access.so</span><br><span class="line">account    include    password-auth</span><br><span class="line">#session    required   pam_loginuid.so  #注释此行</span><br><span class="line">session    include    password-auth</span><br><span class="line">auth       include    password-auth</span><br></pre></td></tr></table></figure><h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><ul><li>不要在单一容器中运行超过一个进程</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;在容器中添加-crontab-并没有生效，这是由于-docker-容器被严格要求只允许使用内核的部分能力导致的，按下面解决方案修改后解决&quot;&gt;&lt;a href=&quot;#在容器中添加-crontab-并没有生效，这是由于-docker-容器被严格要求只允许使用内核的部分能力导致的，按下面解决方案修改后解决&quot; class=&quot;headerlink&quot; title=&quot;在容器中添加 crontab 并没有生效，这是由于 docker 容器被严格要求只允许使用内核的部分能力导致的，按下面解决方案修改后解决&quot;&gt;&lt;/a&gt;在容器中添加 crontab 并没有生效，这是由于 docker 容器被严格要求只允许使用内核的部分能力导致的，按下面解决方案修改后解决&lt;/h3&gt;
    
    </summary>
    
      <category term="docker" scheme="http://www.i4ww.com/categories/docker/"/>
    
    
      <category term="docker crontab" scheme="http://www.i4ww.com/tags/docker-crontab/"/>
    
  </entry>
  
</feed>
